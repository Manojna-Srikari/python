#Python Program to Display Calendar
"""
import calendar
y=int(input())
m=int(input())
print(calendar.month(y,m))
"""

#PYTHON PROGRAM TO CONVERT DECIMAL TO BINARY USING RECURSION2

"""
def dec_bin(n): #5
    if(n>1): #5>1
        dec_bin(n//2) #5//2 2
    print(n%2,end="") #0 

n=int(input()) #5
dec_bin(n)
"""
#Python Program to Generate a Random Number
#1]Generating a Random Number

#--->The random module provides a random() method which generates a float number between 0 and 1.    
"""
import random
print(random.random())
"""
#2]Generating a Number within a Given Range

#--->Python random module provides the randint() method that generates an integer number within a specific range. 
"""
import random
a=random.randint(1,10)
print(a)
"""
#3]Using for loop

#-->The randint() method can be used with for loop to generated a list of random numbers.
"""
import random
l=[]
for i in range(1,6):
    a=random.randint(1,10)
    l.append(a)
print(l)
"""
#4]Using random.sample()

#--->The random module also provides the sample()
"""
import random
a=random.sample(range(1,7),3)
print(a)
"""

# TRANSPOSE OF A MATRIX
"""
a=[[1,1,1],[2,2,2],[3,3,3]]
for i in range(0,len(a)):
    for j in range(0,len(a[0])):
        print(a[j][i],end=" ")
    print(end="\n\n")  #\t=tabspace 
"""


#Python Program to Check Whether a String is Palindrome or Not
"""
n=input()
temp=n[::-1]
if(temp==n):
    print(n,"palindrome")
else:
    print(n,"not a palindrome")
"""

#Python Program to Check Whether a String is Palindrome or Not

"""
punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''

#my_str = "Hello!!!, he said ---and went."

# To take input from the user
my_str = input("Enter a string: ")

# remove punctuation from the string
no_punct = ""
for i in my_str:
   if i not in punctuations:
       no_punct = no_punct + i

# display the unpunctuated string
print(no_punct)
"""

#Python Program to Sort Words in Alphabetic Order

"""
my_str = input("Enter a string: ")
words = [word.lower() for word in my_str.split()]
words.sort()
print("The sorted words are:")
for word in words:
   print(word)
"""

#Python Program to Illustrate Different Set Operations
"""
n={3,4,1,2,6}
v={1,5,7,3,2}
print("union of", n|v)
print("intersection of", n&v)
print("difference of", n-v)
print("symmetric difference of",n^v)
"""
#Python Program to Count the Number of Each Vowel
"""
n=input()
m=['a','e','i','o','u']
sum=0
for i in n:
    if i in m:
        #print(i,end="")
        sum=sum+1
print(sum)
"""

#Python Program to Create Pyramid Patterns
"""
5
* 
* * 
* * * 
* * * * 
* * * * *
"""
"""
n=int(input())
for i in range (0,n):
    for j in range (0,i+1):
        print("*",end=" ")
    print(end="\n")
"""
"""
5
* * * * * 
* * * * 
* * * 
* * 
*
"""
"""
n=int(input())
for i in range (0,n):
    for j in range (n,i,-1):
        print("*",end=" ")
    print(end="\n")
"""
"""
10
* 
* * 
* * * 
* * * * 
* * * * * 
* * * * * 
* * * * 
* * * 
* * 
*
"""
"""
n=int(input())
k=(n+1)//2
for i in range (0,k):
    for j in range (0,i+1):
        print("*",end=" ")
    print(end="\n")
for i in range (k,n):
    for j in range (n,i,-1):
        print("*",end=" ")
    print(end="\n")    
"""
#List Slicing in Python

#Get all the Items
output-[1, 2, 3, 4, 5]


my_list = [1, 2, 3, 4, 5]

print(my_list[:])

#Get all the Items After a Specific Position
[3, 4, 5]
my_list = [1, 2, 3, 4, 5]
print(my_list[2:])

#Get all the Items Before a Specific Position
my_list = [1, 2, 3, 4, 5]
print(my_list[:2])
[1, 2]

#The items before index 2 are sliced. Item on index 2 is excluded
#Get all the Items from One Position to Another Position
my_list = [1, 2, 3, 4, 5]

print(my_list[2:4])
[3, 4]
#The starting position (i.e. 2) is included and the ending position (i.e. 4) is excluded.

#Get the Items at Specified Intervals
my_list = [1, 2, 3, 4, 5]

print(my_list[::2])
[1, 3, 5]

my_list = [1, 2, 3, 4, 5]

print(my_list[::-2])

[5, 3, 1]
my_list = [1, 2, 3, 4, 5]

print(my_list[1:4:2])

[2, 4]


#Python Program Concatenate Two Lists

#Example 1: Using + operator
list_1 = [1, 'a']
list_2 = [3, 4, 5]

list_joined = list_1 + list_2
print(list_joined)

#Example 2: Using iterable unpacking operator *
list_1 = [1, 'a']
list_2 = range(2, 4)

list_joined = [*list_1, *list_2]
print(list_joined)


#Example 3: With unique values
list_1 = [1, 'a']
list_2 = [1, 2, 3]

list_joined = list(set(list_1 + list_2))
print(list_joined)
#set is used to remove duplicates and arrange them in ascending order

#Example 4: Using extend()
list_1 = [1, 'a']
list_2 = [1, 2, 3]

list_2.extend(list_1)
print(list_2)

#Python Program to Check If a List is Empty
#using boolean expression
"""
my_list= []
if not my_list:
    print("empty")
"""

#using length
"""
my_list=[]
if not len(my_list):
    print("empty")
"""

#COMPARING WITH []
"""
my_list=[]
if my_list==[]:
    print("empty")
"""
#Creating Python Dictionary
"""
# empty dictionary
my_dict = {}

# dictionary with integer keys
my_dict = {1: 'apple', 2: 'ball'}

# dictionary with mixed keys
my_dict = {'name': 'John', 1: [2, 4, 3]}

# using dict()
my_dict = dict({1:'apple', 2:'ball'})

# from sequence having each item as a pair
my_dict = dict([(1,'apple'), (2,'ball')])
"""
"""
#Accessing Elements from Dictionary

#While indexing is used with other data types to access values, a dictionary uses keys. Keys can be used either inside square brackets [] or with the get() method.

#If we use the square brackets [], KeyError is raised in case a key is not found in the dictionary. On the other hand, the get() method returns None if the key is not found.

my_dict = {'name': 'Jack', 'age': 26}

# Output: Jack
print(my_dict.get('name'))

# Output: 26
print(my_dict['age'])

# Output None
print(my_dict.get('address'))

# KeyError
print(my_dict['address'])


# Changing and adding Dictionary Elements
my_dict = {'name': 'Jack', 'age': 26}

# update value
my_dict['age'] = 27

#Output: {'age': 27, 'name': 'Jack'}
print(my_dict)

# add item
my_dict['address'] = 'Downtown'

# Output: {'address': 'Downtown', 'age': 27, 'name': 'Jack'}
print(my_dict)
"""


"""

# Dictionary Methods
marks = {}.fromkeys(['Math', 'English', 'Science'], 0)

# Output: {'English': 0, 'Math': 0, 'Science': 0}
print(marks)

for item in marks.items():
    print(item)

# Output: ['English', 'Math', 'Science']
print(list(sorted(marks.keys())))
"""

# Dictionary Comprehension
"""
squares = {x: x*x for x in range(6)}

print(squares)

#or
squares = {}
for x in range(6):
    squares[x] = x*x
print(squares)
"""


# Dictionary Comprehension with if conditional
"""
odd_squares = {x: x*x for x in range(11) if x % 2 == 1}

print(odd_squares)
"""


# Membership Test for Dictionary Keys
"""
squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}

# Output: True
print(1 in squares)

# Output: True
print(2 not in squares)

# membership tests for key only not value
# Output: False
print(49 in squares)
"""
#PYTHON PROGRAM TO MERGE 2 DICTIONARIES
#1. using operator | or **
"""
m={1: 'manu', 2: 'vamsi'}
v={2: 'champ', 3:'sri'}
print(m|v)
#or
print({**m,**v})
"""

#using copy() and update()
"""
m={1: 'manu', 2: 'vamsi'}
v={2: 'champ', 3:'sri'}

c=v.copy()
c.update(m)
print(c)
"""

#PYTHON PROGRAM TO ITERATE OVER DICTIONARIES FOR LOOP
"""
dt = {'a': 'juice', 'b': 'grill', 'c': 'corn'}

for key, value in dt.items():
    print(key, value)
"""

#Python Program to Sort a Dictionary by Value
"""
m={'a':7,'b':0,'c':8}
v=sorted(m.values())
print(v)
"""

#PYTHON PROGRAM TO CHECK IF A KEY IS ALREADY PRESENT IN A DICTIONARY
"""
m={1: 'a',2: 'b',3: 'c'}
if 2 in m:
    print("present")
else:
    print("not present")
"""

#Python Program to Delete an Element From a Dictionary
#1 usind del key word
"""
n={1:'a',2:'b',3:'c'}
del(n[1])
print(n)
"""

#Python Program to Get the Last Element of the List
"""
m=int(input())
l=[]
for i in range (0,m):
    n=int(input())
    l.append(n)
print("last element:",l[n-1])
"""
#Python Program to Concatenate Two Lists
"""
n=int(input())
m=[int(input("m elements")) for i in range(0,n)]
v=[int(input("v elements"))for i in range(0,n)]
print(m,v)
#print(m+v)
#print(*m,*v)
v.extend(m)
print(v)
"""

#Python Program to Get a Substring of a String
"""
m=input("enter a string")
print(m[3:9])
"""
#or
"""
my_string = "I love python."

# prints "love"
print(my_string[2:6])

# prints "love python."
print(my_string[2:])

# prints "I love python"
print(my_string[:-1]
"""
#Python Program to Parse a String to a Float or Int

#Python Program to Print Colored Text to the Terminal
"""
from termcolor import colored
print(colored('sri champ','blue'))
"""

#PARSE STRING TO INTEGER
"""
a_str="777"
a_int=int(a_str)
print(a_int)
"""

 #ii]Parse string into float
"""
balance_str = "1500.4"
balance_float = float(balance_str)

# print the type
print(type(balance_float))

# print the value
print(balance_float)
"""
  #iii]A string float numeral into integer
"""
balance_str = "1500.34"
balance_int = int(flo
 #iii]A string float numeral into integer
"""
"""
balance_str = "1500.34"
balance_int = int(float(balance_str))

# print the type
print(type(balance_int))

# print the value
print(balance_int)
"""
#PYTHON PROGRAM TO SELECT RANDOMLY IN LIST
"""
import random
my_list=[1,2,3,4,5,6,7]
print (random.choice(my_list))
#or
import secret
my_list=[1,2,3,4,5,6,7]
print (secret.choice(my_list))
"""

#PYTHON PROGRAM TO CHECK IF A STRING IS A NUMBER (FLOAT)
"""
def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False
print(isfloat('m78'))
print(isfloat('3.45'))       
"""
#Python Program to Count the Occurrence of an Item in a List
"""
l=list(map(int,input().split()))
n=int(input())
count=0
for i in range(0,len(l)):
    if l[i]==n:
        count=count+1
print(count)
"""
"""
l=list(map(int,input().split()))
n=int(input())
print(l.count(n))
"""


#Python Program to Create a Long Multiline String
#1: Using triple quotes
"""
string='''hai everyone
how are you
everthing is fine..'''

print(string)
"""

#2: Using parentheses and a single/double quotes
"""
string=("hai everyone \n"
"how are you \ns"
"everthing is fine..")

print(string)
"""
# 3: Using \
"""
string="hai everyone \n" \
"how are you \n" \
"everthing is fine.."
print(string)
"""

#PYTHON PROGRAM TO FIND THE LARGEST ELEMENT IN AN ARRAY

"""
def large_ele(arr):
    temp=arr[0]
    for i in range(1,len(arr)):
        if(temp<arr[i]):
            temp=arr[i]
    return temp           


arr=list(map(int,input().split()))
l=large_ele(arr)
print("large:",l)
"""

#PYTHON PROGRAM TO FIND THE SMALLEST ELEMENT IN AN ARRAY
"""
def small_ele(arr):
    temp=arr[0]
    for i in range(1,len(arr)):
        if(temp>arr[i]):
            temp=arr[i]
    return temp           


arr=list(map(int,input().split()))
s=small_ele(arr)
print("small:",s)
"""

#Python Program for Find reminder of array multiplication divided by n
"""
l=list(map(int,input().split()))
d=int(input())
s=1
for i in range(1,len(l)):
    s=s*l[i]
    #print(s)
print(s%d)
"""

#PYTHON PROGRAM FOR ARRAY ROTATION
"""
def rotate(ar,d,n):
    for i in range(0,d):
        s=ar.pop(0)
        ar.append(s)
    print(ar)

n=int(input("Enter array size"))
ar=[]
d=int(input("How many elements to rotate"))
for i in range(0,n):
    ar.append(int(input("Enter elements")))
rotate(ar,d,n)
"""


#Python Program to Split the array and add the first part to the end
"""
def rotate(ar,d,n):
    for i in range(0,d):
        s=ar.pop(0)
        ar.append(s)
    return ar

n=int(input("Enter array size"))
ar=[]
d=int(input("How many elements to rotate"))
for i in range(0,n):
    ar.append(int(input("Enter elements")))
s=rotate(ar,d,n)
for i in range(0,len(s)):
    print(s[i],end=" ")
"""   

#Python program to interchange first and last elements in a list

"""

l=list(map(int,input().split()))#1 2 3 4 
y=len(l)
fi=l[0]
l.pop(0)


la=l[len(l)-1]#
l.pop(y-2)

l.append(fi)
l.insert(0,la)
print(l)

"""
#or
"""
l=list(map(int,input().split()))
a=len(l)
l[0],l[a-1]=l[a-1],l[0]
print(l)
"""
#Python program to swap two elements in a list
"""
l=list(map(int,input().split()))
pos1=int(input())-1
pos2=int(input())-1
l[pos1],l[pos2]=l[pos2],l[pos1]
print(l)
"""













